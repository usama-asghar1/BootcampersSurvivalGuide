==== ./src/reportWebVitals.js ====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
==== ./src/Square/index.js ====
==== ./src/App.css ====
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
==== ./src/index.js ====
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
==== ./src/index.css ====
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
==== ./src/Forum/commentform.js ====
import { useState } from "react";

function CommentForm({comments, setComments}) {
  const [author, setName] = useState("Anon Author");
  const [content, setContent] = useState("")

  function handleSubmitButton(event) {
    event.preventDefault()
    if (author.trim() === '' || content.trim() === '') {
      alert("Comment cannot be empty!")
      return;
    }
    setComments([...comments, {author: author, content: content}])
    setName("Anon Author");
    setContent("");
  }
  return (
    <div>
      <form onSubmit={handleSubmitButton}>
        <label>
          {" "}
          Author:
          <br/>
          <input required value={author}
            onChange={function (event) {
              setName(event.target.value);
            }}
          />
         
        </label>
        <br/>
        <label>
          {" "}
          <br/>
          Comment:
          <br/>
          <textarea required value={content}
            onChange={function (event) {
              setContent(event.target.value);
            }}
          />
        </label>
        <br/>
        <button type="submit" >Submit</button>
        <br/>
      </form>
    </div>
  );
}

export default CommentForm;==== ./src/Forum/blogpost.js ====
export default function BlogPost({title, author, datePosted, content}) {
    return (
      <div>
        <h1>{title}</h1>
        <p>{author}</p>
        <p>{datePosted}</p>
        <p>{content}</p>
      </div>
    )
  
  };
  ==== ./src/Forum/index.js ====
import {useState} from "react";
import CommentList from "./commentlist.js";
import CommentForm from "./commentform.js";
import BlogPost from "./blogpost.js";
import "./index.css";


function Forum() {
  //created comments array
  const [comments, setComments] = useState([{id: 1, author: "Donald Mouse", content: "This is the 1st comment"}, {id: 2, author: "Mickey Duck", content: "This is the 2nd comment"}]);
  return (
    <div>
  <BlogPost />
  {/* call commentList and pass it the props of comments array  */}
  <CommentList comments={comments} />
  <CommentForm comments={comments} setComments={setComments}/>
  </div>
  )
}

export default Forum;==== ./src/Forum/index.css ====

html {
    display: flex;
    flex-direction: column;
    justify-content: center;
    justify-items: center;
    align-items: center;
    align-content: center;
    text-align: center;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
  }
  
  body {
    margin: 20px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    justify-items: center;
    align-items: center;
    align-content: center;
    text-align: center;
    background: linear-gradient(45deg, #f3ec78, #af4261);
  }
  
  .initials {
    font-size: 1.5rem;
    width: 50px;
    height: 50px;
    font-weight: 700;
    color: #fff;
    text-align: center;
    margin: 0;
    padding: 0;
    line-height: 1;
    border-radius: 50%;
    /* background colour gradient */
    background: linear-gradient(45deg, #f3ec78, #af4261);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    justify-items: center;
    margin: 10px;
    padding: 10px;
  }
  #inline_name {
    display: flex;
    flex-direction: row;
    margin: 10px;
    /* // vertically align align-items;; */
    align-items: center;
  }
  
  img {
    width: 250px;
    height: 250px;
    margin: 10px;
    border-radius: 10px;
  }
  #CommentList {
      display: flex;
      flex-direction: column;
      justify-content: center;
      justify-items: center;
      align-items: center;
      align-content: center;
      text-align: center;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 30px;
  }
  
      input {
      
          background: linear-gradient(to bottom right, #43c6ac, #00a8e8);
          margin: 10px;
          padding: 10px;
          border-radius: 10px;
          border: 1px solid #ccc;
          margin: 10px;
          /* shadow */
          box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
          /* transition */
          transition: all 0.3s ease-in-out;
  
  }
  
  
      textarea {
          background: linear-gradient(to bottom right, #43c6ac, #00a8e8);
          max-width: 250px;
          border-radius: 10px;
          border: 1px solid #ccc;
          padding: 10px;
          box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
      }
      ==== ./src/Forum/comment.js ====
function Comment({ author, content }) {
    let initials = author
      .split(" ")
      .map((name) => name[0])
      .join("")
      .toUpperCase();
    if (initials.length > 2) {
      initials = initials.slice(0, 1) + initials.slice(-1);
    }
    return (
      <container>
        <div id="inline_name">
          <h3 className="initials">{initials}</h3>
          <h3>{author}</h3>
        </div>
        <div>
          <p>{content}</p>
        </div>
      </container>
    );
  }
  
  export default Comment;==== ./src/Forum/commentlist.js ====
import Comment from "./comment.js"; 

function CommentList({comments}) {
  return (
    <div id="CommentList">
    {/* loop over the comments array and give each comment the prop of id, author and content */}
    {comments.map((comment)=> 
    <Comment key={comment.id} author={comment.author} content={comment.content} />
    )}</div>)

}

export default CommentList
==== ./src/App.test.js ====
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
==== ./src/setupTests.js ====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
==== ./src/logo.svg ====
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>==== ./src/App.js ====
import logo from './logo.svg';
import './App.css';
import Forum from './Forum/index.js';


function App() {
  return (
    <div className="App">
      <Forum />
    </div>
  );
}

export default App;
==== ./src/Grid/index.js ====
